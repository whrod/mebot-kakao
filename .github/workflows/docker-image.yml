name: CI/CD Docker

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mebot-kakao
  VERSION: ${{ github.sha }}
  NAME: docker_cicd

jobs:
  build-and-push-image:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        #DockerCache 활용

      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          build-args: |
            NOTION_TOKEN=${{ secrets.NOTION_TOKEN }}
            NOTION_PAGE_URL=${{ secrets.NOTION_PAGE_URL}}
            NOTION_DOMAIN=${{ secrets.NOTION_DOMAIN}}
            NOTION_TODO_DATABASE_ID=${{ secrets.NOTION_TODO_DATABASE_ID}}
            NOTION_BLOG_DATABASE_ID=${{ secrets.NOTION_BLOG_DATABASE_ID}}
            NOTION_INTERVIEW_DATABASE_ID=${{ secrets.NOTION_INTERVIEW_DATABASE_ID}}
            NOTION_MEMBER_SNS_DATABASE_ID=${{ secrets.NOTION_MEMBER_SNS_DATABASE_ID}}
            NOTION_PORTFOLIO_DATABASE_ID=${{ secrets.NOTION_PORTFOLIO_DATABASE_ID}}
            NOTION_REF_SITES_DATABASE_ID=${{ secrets.NOTION_REF_SITES_DATABASE_ID}}
            NOTION_PROJECT_IDEAS_DATABASE_ID=${{ secrets.NOTION_PROJECT_IDEAS_DATABASE_ID}}
            NOTION_MEETING_SCHEDULE_DATABASE_ID=${{ secrets.NOTION_MEETING_SCHEDULE_DATABASE_ID}}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY}}
            OPENAI_ORG_ID=${{ secrets.OPENAI_ORG_ID}}
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  deploy:
    needs: build-and-push-image
    name: Deploy
    runs-on: [self-hosted, label-go]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 3000:3000/udp --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
      - name: Set up Logrotate
        run: |
          sudo -E bash -c 'echo "/var/lib/docker/containers/*/*.log {
            rotate 5
            daily
            size 5M
            missingok
          }" > /etc/logrotate.d/docker-cicd'

      - name: Give permission to logrotate cron job
        uses: actions/checkout@v2

      - name: Configure logrotate cron job
        run: |
          crontab -l | sed '/logrotate/d' | crontab -
          crontab -l | { cat; echo "0 4 * * * TZ=Asia/Seoul logrotate -f /etc/logrotate.conf"; } | crontab -
